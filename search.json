[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Daniel’s Numerical Methods Notes",
    "section": "",
    "text": "Small site by Onyesoh Daniel to share Notebooks on Numerical Methods(CSC-431)"
  },
  {
    "objectID": "1. Solutions to Non-linear Equations/1.1. What are Non-linear Equations.html",
    "href": "1. Solutions to Non-linear Equations/1.1. What are Non-linear Equations.html",
    "title": "1.1. What are Root Finding Problems?",
    "section": "",
    "text": "Root-finding problems are problems where you are given a continuous function, \\(f(x)\\) and have to find values \\(r\\) where: \\(f(r) = 0\\)"
  },
  {
    "objectID": "1. Solutions to Non-linear Equations/1.1. What are Non-linear Equations.html#example-1",
    "href": "1. Solutions to Non-linear Equations/1.1. What are Non-linear Equations.html#example-1",
    "title": "1.1. What are Root Finding Problems?",
    "section": "Example 1",
    "text": "Example 1\nFormulate finding the cube root of \\(2\\) as a root-finding problem\n\nSolution\n\nGet the equation that expresses the relation:\n\\(x^3 = 2\\)\nFactor the equation to make one side equal to \\(0\\):\n\\(x^{3} - 2 = 0\\)\nNow that the equation is equal to \\(0\\) convert it to a function \\(f(x)\\):\n\\(f(x) = x^{3} - 2\\)\nFind a value \\(r\\) such that \\(f(r) = 0\\)\n\nVóila, you now have a continuous function \\(f(x)\\) that express the relation you want and by finding \\(r\\) you solve your problem.\nNumerical Methods are primarily concerned with step \\(4\\), hence the name root-finding problems."
  },
  {
    "objectID": "1. Solutions to Non-linear Equations/1.2 Numerical Methods for Non-Linear Equations.html",
    "href": "1. Solutions to Non-linear Equations/1.2 Numerical Methods for Non-Linear Equations.html",
    "title": "1.2. Numerical Methods for solving Non-linear Equations",
    "section": "",
    "text": "Numerical methods for solving non-linear equations can be broadly divided into two:"
  },
  {
    "objectID": "1. Solutions to Non-linear Equations/1.2 Numerical Methods for Non-Linear Equations.html#bracketing-methods",
    "href": "1. Solutions to Non-linear Equations/1.2 Numerical Methods for Non-Linear Equations.html#bracketing-methods",
    "title": "1.2. Numerical Methods for solving Non-linear Equations",
    "section": "Bracketing Methods",
    "text": "Bracketing Methods\nThese methods take an interval \\([a,b]\\) which is known to contain a root of the equation, the interval is reduced through multiple iterations with the aim of increasing the accuracy of the estimate of the root."
  },
  {
    "objectID": "1. Solutions to Non-linear Equations/1.2 Numerical Methods for Non-Linear Equations.html#open-methods",
    "href": "1. Solutions to Non-linear Equations/1.2 Numerical Methods for Non-Linear Equations.html#open-methods",
    "title": "1.2. Numerical Methods for solving Non-linear Equations",
    "section": "Open Methods",
    "text": "Open Methods\nThese methods don’t require an interval, they just take a rough estimate of the equation’s root and iteratively improve the accuracy."
  },
  {
    "objectID": "1. Solutions to Non-linear Equations/1.3. Bracketing Methods.html",
    "href": "1. Solutions to Non-linear Equations/1.3. Bracketing Methods.html",
    "title": "1.3. Bracketing Methods",
    "section": "",
    "text": "Bracketing methods start with an interval that contains the root and a procedure is used to obtain a smaller interval containing the root.\nExamples of Bracketing methods:\n\nBisection Method\nFalse position method (Regula-Falsi)\n\n\n# These are helper types that are declared to document the code.\nfrom typing import Callable, Tuple \n\n# A non-linear function is simply a function that takes\n# a float and returns a float.\nNonLinearFunction = Callable[[float], float]\n\n# Helper Functions\ndef sign_of(number) -&gt; int:\n    if number == 0:\n        return 0\n    elif number &lt; 0:\n        return -1\n    elif number &gt; 0:\n        return 1\n\n\n1.3.1 Bisection Method (or Interval Halving)\nIn the bisection method you are given the two numbers that represent an interval on the x-axis of the number line that contains the root.\n           interval_midpoint\n                   |\n  interval_start   ↓   interval_end \n          ⬤-----------------⬤\n-∞       -3 -2  -1   0   1   2   3       +∞\n └┴┴┴┴┴─┴─┴──┴───┴───┴───┴───┴───┴─┴─┴┴┴┴┘ \n\nAssumptions of the Bisection Method\nGiven a function \\(f(x)\\) and an interval \\([interval\\_start, interval\\_end]\\):\n\n\\(f(x)\\) is continuous on the interval.\nThe sign of \\(f(interval\\_start)\\) and \\(f(interval\\_end)\\) are different (i.e \\(f(interval\\_start) \\times f(interval\\_end)\\))\n\n\n\nAlgorithm of the Bisection Method\n\nAt each iteration you evaluate the value of the function at:\n\nThe start of the interval, \\(interval\\_start\\)\nThe end of the interval, \\(interval\\_end\\)\nAnd, the midpoint of the interval, \\(interval\\_midpoint\\)\n\nAdjust the values of \\(interval\\_start\\) and \\(interval_end\\) using the following rule:\n\nIf the value of the function at \\(interval\\_midpoint\\) has the same sign as \\(interval\\_start\\), then the new interval is: \\([interval\\_midpoint, interval\\_end]\\).\nIf the value of the function at \\(interval\\_midpoint\\) has the same sign as \\(interval\\_end\\), then the new interval is: \\([interval\\_start, interval\\_midpoint]\\)\n\n\n\n\nBest Estimate and Error Level\nThe best estimate of the root of the equation is the mid point of the interval.\n\\(Estimate \\space of \\space the \\space zero: r = \\frac{b + a}{2}\\)\nUsing the midpoint of the interval as an estimate the error is given by:\n\\(Error \\leq \\frac{b - a}{2}\\)\n\n\nConvergence Analysis of Bisection Method\n\\(n \\leq \\frac{log(b-a) - log(\\epsilon)}{log(2)}\\)\nWhere:\n\n\\(n\\): The number of iterations.\n\\([a, b]\\): The interval of the containing the root.\n\\(\\epsilon\\): The acceptable error (specified as an absolute error).\n\n\n# This is a verbose example to explain the concepts\n\ndef bisection_method(\n    function: NonLinearFunction,\n    interval: Tuple[float, float],\n    iteration_limit: int,\n) -&gt; float:\n\n    # Check that the interval has two different errors at both sides\n    (interval_start, interval_end) = interval\n    if sign_of(function(interval_start)) == sign_of(function(interval_end)):\n        raise \"The start and end of the interval must have different signs\"\n\n\n    # Create table for pretty-printing.\n    print(f\"| Start    | Midpoint | End      |\")\n    print(f\"==================================\")\n\n    for _ in range(iteration_limit):\n        interval_midpoint = (interval_start + interval_end) / 2\n\n        # Log the interval values\n        print(f\"| {interval_start:.6f} | {interval_midpoint:.6f} | {interval_end:.6f} |\")\n\n        # Get the value of the function at the interval's\n        # start, end and midpoint.\n        value_at_interval_start: float = function(interval_start)\n        value_at_interval_end: float = function(interval_end)\n        value_at_interval_midpoint: float = function(interval_midpoint)\n\n        if abs(value_at_interval_midpoint):\n            return interval_midpoint\n\n        # If we found the exact root return early.\n        if value_at_interval_midpoint == 0:\n            return interval_midpoint\n\n        elif sign_of(value_at_interval_start) == sign_of(value_at_interval_midpoint):\n            # If the sign of the midpoint is the same as the sign at the \n            # start of the interval, the midpoint becomes the new interval start\n            interval_start = interval_midpoint\n            \n        elif sign_of(value_at_interval_end) == sign_of(value_at_interval_midpoint):\n            # If the sign of the midpoint is the same as the sign at the\n            # end of the interval, the midpoint becomes the new interval end. \n            interval_end = interval_midpoint\n\n    # Once we've exceeded the iteration limit return whatever is the\n    # midpoint of the interval\n    interval_midpoint = (interval_start + interval_end) / 2\n    return interval_midpoint\n\n\nTesting out our code:\n\nfunc_1 = lambda x: (x**2) - x - 2\n\nroot = bisection_method(\n    function = func_1,\n    interval = (0, 3),\n    iteration_limit = 20,\n)\n\nimport matplotlib.pyplot as plt\n\nplt.grid()\nplt.plot(\n    list(map(func_1, range(-3, 6)))\n)\nplt.scatter(2, 0, color=\"red\")\nplt.scatter(5, 0, color=\"red\")\n\n| Start    | Midpoint | End      |\n==================================\n| 0.000000 | 1.500000 | 3.000000 |\n| 1.500000 | 2.250000 | 3.000000 |\n| 1.500000 | 1.875000 | 2.250000 |\n| 1.875000 | 2.062500 | 2.250000 |\n| 1.875000 | 1.968750 | 2.062500 |\n| 1.968750 | 2.015625 | 2.062500 |\n| 1.968750 | 1.992188 | 2.015625 |\n| 1.992188 | 2.003906 | 2.015625 |\n| 1.992188 | 1.998047 | 2.003906 |\n| 1.998047 | 2.000977 | 2.003906 |\n| 1.998047 | 1.999512 | 2.000977 |\n| 1.999512 | 2.000244 | 2.000977 |\n| 1.999512 | 1.999878 | 2.000244 |\n| 1.999878 | 2.000061 | 2.000244 |\n| 1.999878 | 1.999969 | 2.000061 |\n| 1.999969 | 2.000015 | 2.000061 |\n| 1.999969 | 1.999992 | 2.000015 |\n| 1.999992 | 2.000004 | 2.000015 |\n| 1.999992 | 1.999998 | 2.000004 |\n| 1.999998 | 2.000001 | 2.000004 |\n\n\n&lt;matplotlib.collections.PathCollection at 0x25c671f5490&gt;\n\n\n\n\n\n\n# Simple version\n\ndef bisection_method_simple(\n    f: NonLinearFunction,\n    interval: Tuple[float, float],\n    iteration_limit: int,\n    error_limit: float\n) -&gt; float:\n    (a, b) = interval\n    for _ in range(iteration_limit):\n        c = (a+b) / 2\n        f_a = f(a)\n        f_b = f(b)\n        f_c = f(c)\n\n        if sign_of(f_c) == sign_of(f_a):\n            a = c\n        elif sign_of(f_c) == sign_of(f_b):\n            b = c\n        elif f_c == 0:\n            return c\n\n    return (a+b) / 2\n\n\nprint(\"hi bby\")"
  }
]